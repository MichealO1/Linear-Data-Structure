/*

Objective
At this checkpoint you are asked to write an algorithm that fulfill the following description:

Description:

Given two sets of elements, find the sum of all distinct elements from the set. 
In other words, find the sum of all elements which are present in either of the given set.
Example:
Set 1 : [3, 1, 7, 9], Set 2: [2, 4, 1, 9, 3]
Output: 13 (distinct elements - 4, 7, 2 )
Give two Solution to this problem, using a different type of data structures each time.
Now, given two sets of integers, write also two algorithms to print the sum of overlapping elements in two sets. 
The elements in each set are unique or there are no duplicates within a set.

Example: 

Set 1: [12, 13, 6, 10]
Set 2: [13, 10, 16, 15]
Sum of overlapping elements: 46
Explanation: Common elements are 10, 13

Instructions
Problem 1, Solution 1 with an array.
Initialize sum = 0. Compare each element of set one with the second set and if element is not present then add 
that element to sum. Then do the vice versa to add elements from the second set. 
Problem 1, Solution 2 with an hash table.
Insert all the elements from both the sets with the element as key and its count (in both arrays).
Now iterate through the constructed map and sum all the elements with count = 1.
Problem 2, same approaches with little modifications.

*/


const set1 = [3, 1, 7, 9];
const set2 = [2, 4, 1, 9, 3];

ALGORITHM problem1Solution1
VAR
    set1: ARRAY_OF INTEGER;
    set2: ARRAY_OF INTEGER
    sum: INTEGER: = 0
BEGIN
    FOR i FROM 0 TO set1.length STEP 1 DO
        IF (!set2.includes(set1[i])) sum += set1[i];

        END_IF
    END_FOR

    FOR i FROM 0 TO set2.length STEP 1 DO
        IF (!set1.includes(set2[i])) sum += set2[i];

        END_IF
    END_FOR

    Write(sum)
END


.ALGORITHM problem1Solution2
VAR
    arr1: ARRAY_OF: INTEGER: = [12, 13, 6, 10];
    arr2: ARRAY_OF INTEGER: = [13, 10, 16, 15]
    sum: INTEGER: = 0
    store: ARRAY_OF: = {}
    hash: HASH_TABLE: = ()
BEGIN
    FOR i FROM 0 TO arr1.length-1 STEP 1 DO; 
        IF (store [arr1[i]]) THEN
            store[arr1[i]] += 1;
        ELSE
            store[arr1[i]] = 1;
        END_IF
    END_FOR

    FOR i FROM 0 TO arr2.length-1 STEP 1 DO; 
        IF (store [arr2[i]]) THEN
            store[arr2[i]] += 1;
        ELSE
            store[arr2[i]] = 1;
        END_IF
    


        store = Object.entries(store).filter(([key, value]) => {
        return value === 1;

        store = store.map((number) => Number(number[0]));

        store = store.reduce((a, b) => a + b);

        Write(store);

        Write(sum);

    END_FOR

END

.ALGORITHM problem1Solution2
VAR
    arr1: ARRAY_OF: INTEGER: = [12, 13, 6, 10];
    arr2: ARRAY_OF INTEGER: = [13, 10, 16, 15]
    sum: INTEGER: = 0
    hash: HASH_TABLE: = ()
BEGIN
    FOR i FROM 0 TO arr1.length-1 STEP 1 DO;
        IF (hash != (arr1[i])) THEN 
            hash = (arr1[i], 1)

        ELSE

            hash = (arr1[i], hash.get(arr1[i]) +1);

        END_IF

    END_FOR


    FOR i FROM 0 TO arr2.length-1 STEP 1 DO;
        IF (hash != (arr2[i])) THEN 
            hash = (arr2[i], 1)

        ELSE
        
            hash = (arr2[i], hash.get(arr2[i]) +1);

        END_IF

    END_FOR

    FOR ( [key, value] of  hash.entries()) THEN

        IF (value > 1) THEN
            sum += key * 2
        END_IF
        
    END_FOR

    });

    Write(sum)
END

